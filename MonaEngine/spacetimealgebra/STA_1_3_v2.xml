<?xml version="1.0" encoding="utf-8" ?>

<g25spec 
    license="gpl" 
    language="cpp"
    namespace="m4sta"
    coordStorage="array"
    defaultOperatorBindings="true"
    dimension="4"
    reportUsage="false" 
    gmvCode="expand"
    parser="builtin"
    testSuite="true"
    copyright="Gaigen 2.5 Test Suite"
>

<verbatim filename="m4sta.cpp" position="before" marker="#include ">
#define _CRT_SECURE_NO_WARNINGS
</verbatim>


<inline 
	constructors="false" 
	set="false" 
	assign="false" 
	operators="false" 
	functions="false"
	/>


<floatType type="double"/>

<basisVectorNames 
	name1="g0"
	name2="g1"
	name3="g2"
	name4="g3"
	/>

<metric name="default">g0.g0 = 1</metric>
<metric name="default">g1.g1 = g2.g2 = g3.g3 = -1</metric>

<mv name="mv" compress="byGrade" coordinateOrder="custom" memAlloc="dynamic">
	scalar
	g0 g1 g2 g3
	g0^g1 g0^g2 g0^g3 g1^g2 g1^g3 g2^g3
	g1^g2^g3 g0^g1^g2 g0^g1^g3 g0^g2^g3
	g0^g1^g2^g3
</mv>


<!-->Unit vectors and unit pseudoscalar.<-->
<smv name="g0" const="true" type="blade">g0=1</smv>
<smv name="g1" const="true" type="blade">g1=1</smv>
<smv name="g2" const="true" type="blade">g2=1</smv>
<smv name="g3" const="true" type="blade">g3=1</smv>
<smv name="I"  const="true" type="multivector">g0^g1^g2^g3=1</smv>


<!-->
Multivector M given by the following can be also decomposed to even and odd subalgebras.
M   =   0-vector + 1-vector +  2-vector  +  3-vector     +  4-vector
M   =   scalar   + vector   +  bivector  +  pseudovector +  pseudoscalar
M_+ =   scalar   + bivector +  pseudoscalar
M_- =   vector   + trivector
<-->

<!-->Here be the basis blades!<-->
<smv name="scalar"       type="blade">scalar</smv>
<smv name="vector"       type="blade">g0 g1 g2 g3</smv>
<smv name="bivector"     type="blade">g0^g1 g0^g2 g0^g3 g1^g2 g1^g3 g2^g3</smv>
<!-->
The trivectors are the duals of vectors;
g0^I = g123
g1^I = g023
g2^I = -g013 = g310
g3^I = g012
<-->
<smv name="trivector"    type="blade">g1^g2^g3 g0^g2^g3 g3^g1^g0 g0^g1^g2</smv>
<smv name="pseudoscalar" type="blade">g0^g1^g2^g3</smv>

<!-->Even and odd subalgebras of MÃ®nkowski space, Multivectors M_+ and M_- as given above.<-->
<smv name="evensubalgebra" type="multivector">
scalar 
g0^g1 g0^g2 g0^g3 g1^g2 g1^g3 g2^g3
g0^g1^g2^g3
</smv>

<smv name="oddsubalgebra" type="multivector">
g0 g1 g2 g3
g1^g2^g3 g0^g2^g3 g3^g1^g0 g0^g1^g2
</smv>




<!-->
<smv name="rotor"     type="versor">scalar g0^g1 g0^g2 g1^g2 g0^g3 g1^g3 g2^g3</smv>
<smv name="oddVersor" type="versor">g0 g1 g2 g3 g0^g1^g2 g0^g1^g3 g0^g2^g3 g1^g2^g3</smv>

<smv name="idk1" type="multivector">scalar g0^g1 g0^g2 g1^g2 g0^g3 g1^g3 g2^g3 g0^g1^g2^g3  <comment>MISSING; PLEASE ADD TO SPECIFICATION</comment></smv>
<smv name="idk2" type="multivector">g0^g1 g0^g2 g1^g2 g0^g3 g1^g3 g2^g3 g0^g1^g2^g3  <comment>MISSING; PLEASE ADD TO SPECIFICATION</comment></smv>
<-->

	<om name="om" coordinateOrder="default" />
	<function name="random_double" outputName="genrand" optionGen="libc"/>

<!-->
<function name="_bivector"  arg1="rotor"     argName1="R" comment="Extracts the bivector part of a rotor."/>
<function name="_vector"    arg1="oddVersor" argName1="V" comment="Extracts the vector part of an oddVersor."/>
<function name="_trivector" arg1="oddVersor" argName1="V" comment="Extracts the trivector part of an oddVersor."/>
<-->

<function name="add" arg1="mv" arg2="mv"/>
<function name="add" arg1="bivector" arg2="bivector"/>

<function name="subtract" arg1="mv" arg2="mv" returnType="mv"/>
<function name="subtract" arg1="bivector" arg2="bivector" returnType="bivector"/>



<function name="applyOM" arg1="om" arg2="mv"/>

<function name="applyVersor" arg1="mv" arg2="mv"/>
<function name="applyVersor" arg1="bivector" arg2="bivector"/>

<function name="applyUnitVersor" arg1="mv" arg2="mv"/>
<function name="applyUnitVersor" arg1="bivector" arg2="bivector"/>

<function name="applyVersorWI" arg1="mv" arg2="mv" arg3="mv"/>

<function name="div" arg1="mv" arg2="double" floatType="double"/>

<function name="dual" arg1="mv"/>

<function name="undual" arg1="mv"/>

<function name="equals" arg1="mv" arg2="mv" arg3="double" floatType="double"/>

<function name="extractGrade" arg1="mv"/>

<function name="gp" arg1="mv" arg2="mv" returnType="mv"/>
<function name="gp" arg1="bivector" arg2="bivector" returnType="bivector"/>
<function name="gp" arg1="double" arg2="mv" returnType="mv"/>
<function name="gp" arg1="mv" arg2="double"/>
<function name="gp" arg1="double" arg2="bivector" returnType="bivector"/>

<function name="igp" arg1="mv" arg2="mv"/>

<function name="hip" arg1="mv" arg2="mv"/>
<function name="hip" arg1="bivector" arg2="bivector"/>
<function name="mhip" arg1="mv" arg2="mv"/>

<function name="lc" arg1="mv" arg2="mv"/>
<function name="rc" arg1="mv" arg2="mv"/>

<function name="sp" arg1="mv" arg2="mv"/>
<function name="sp" arg1="bivector" arg2="bivector"/>
<function name="sp" arg1="double" arg2="mv" floatType="double"/>

<function name="norm" arg1="mv"/>
<function name="norm" arg1="scalar"/>
<function name="norm" arg1="vector"/>
<function name="norm" arg1="bivector"/>

<function name="norm2" arg1="mv"/>
<function name="norm2" arg1="bivector"/>

<function name="op" arg1="mv" arg2="mv"/>
<function name="op" arg1="bivector" arg2="bivector"/>

<function name="random_blade" floatType="double" optionGen="libc"/>

<function name="random_versor" floatType="double" optionGen="libc"/>

<function name="random_scalar" floatType="double" optionGen="libc"/>

<function name="random_bivector" floatType="double" optionGen="libc"/>

<function name="random_vector" floatType="double" optionGen="libc"/>

<function name="sas" arg1="mv" arg2="double" arg3="double" floatType="double"/>

<function name="exp" arg1="mv"/>

<function name="sin" arg1="mv"/>

<function name="cos" arg1="mv"/>

<function name="sinh" arg1="mv"/>

<function name="cosh" arg1="mv"/>

<function name="negate" arg1="mv"/>

<function name="reverse" arg1="mv"/>
<function name="reverse" arg1="bivector"/>

<function name="cliffordConjugate" arg1="mv"/>
<function name="cliffordConjugate" arg1="bivector"/>

<function name="gradeInvolution" arg1="mv"/>

<function name="unit" arg1="mv"/>
<function name="unit" arg1="bivector"/>

<function name="versorInverse" arg1="mv"/>

<function name="zero" arg1="mv" arg2="double" floatType="double"/>

</g25spec>